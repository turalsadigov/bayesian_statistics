---
title: "Bayesian Statistics - some experiments"
author: "Tural Sadigov"
date: today
format: 
    html:
      theme: 
        light: united
        dark: darkly
      smooth-scroll: true
always_allow_html: true
editor: visual
toc: true
toc-location: right
number-sections: false
cap-location: bottom
fig-cap-location: bottom
tbl-cap-location: top
page-layout: article
code-fold: show
code-summary: "Collapse/show the code below"
code-overflow: scroll
code-line-numbers: true
code-copy: true
execute:
  echo: true
  warning: false
  eval: true
  output: true
  error: false
  cache: true
  freeze: true
  out.width: "100%"
fig-align: center
title-block-banner: true
title-block-banner-color: black
bibliography: references.bib
reference-location: margin
---

This markdown file is created following the book titled "Bayes Rules! An Introduction to Applied Bayesian Modeling" by Alicia A. Johnson, Miles Q. Ott and Mine Dogucu (see @bayesrulesbook). Throughout the report, we use `tidyverse` package (@tidyverse) for data wrangling, `bayesrules` package (@bayesrules) to use book specific functions, `janitor` package (@janitor) for some summary functions and `patchwork` package (@patchwork) extended visualizations from `ggplot2` package (@ggplot2).

# chapter 4

## libraries

```{r}
# Load packages
library(bayesrules)
library(tidyverse)
library(janitor)
library(patchwork)
```

Assume we have $\pi$ \~ Beta(1, 10) prior. We collect data and got $y = 1$ success out of $n = 10$ trials. Thus posterior is $\pi$ \~ Beta(a+y, b+n-y) = Beta(2, 19).

```{r}
p1 <- plot_beta(1, 10)
p2 <- plot_beta(2, 19)
p1 + p2
```

Or indirectly

```{r}
plot_beta_binomial(alpha = 1, beta = 10, y = 1, n = 10,
                   prior = TRUE, 
                   likelihood = FALSE, 
                   posterior = TRUE)
```

We collect more data: y = 17 and n = 20. Then new prior Beta(2, 19) and new posterior would be Beta(19, 22).

```{r}
plot_beta_binomial(alpha = 2, beta = 19, y = 17, n = 20,
                   prior = TRUE, 
                   likelihood = FALSE, 
                   posterior = TRUE)
```

## discrete-normal model

Assume we have a data coming from a normal distribution with standard deviation of 1, and we would like to create a model for its mean: $\mu$. We assume first that mu can have only one of three values:

-   -0.10
-   0
-   0.50

```{r}
mu <- c(-0.10, 0, 0.50)
prior <- c(0.10, 0.20, 0.70)
df <- tibble(mu, prior)
df

set.seed(2022)
data <- rnorm(10)
ll <- function(mu){
  return(prod(dnorm(data, mean = mu, sd = 1)))
}

df %>% 
  mutate(l = as.numeric(map(mu, ll))) %>% 
  mutate(posterior = l*prior/sum(l*prior)) %>% 
  ggplot(aes(x = factor(mu))) +
  geom_point(aes(y = prior, size = 2), color='red') +
  geom_linerange(aes(ymin = 0, ymax = prior)) +
  geom_point(aes(y = posterior, size = 2), , color='darkgreen') +
  geom_linerange(aes(ymin = 0, ymax = posterior))

```

Here red dots are prior pmf and green dots are the posteriro. It shows that aming three options, it puts more weight onto $\mu = 0$ as it should since data is generated froms standard normal distribution. Increase data size.

```{r}
set.seed(2022)
data <- rnorm(100)
ll <- function(mu){
  return(prod(dnorm(data, mean = mu, sd = 1)))
}

df %>% 
  mutate(l = as.numeric(map(mu, ll))) %>% 
  mutate(posterior = l*prior/sum(l*prior)) %>% 
  ggplot(aes(x = factor(mu))) +
  geom_point(aes(y = prior, size = 2), color='red') +
  geom_linerange(aes(ymin = 0, ymax = prior)) +
  geom_point(aes(y = posterior, size = 2), , color='darkgreen') +
  geom_linerange(aes(ymin = 0, ymax = posterior))

```

## uniform-normal model

Assume that $\mu$ can take any value from -1 and 5 with equal probability (so uniform prior, techncially discrete uniform prior). Generate data with mean 3 and see if posteriror will produce a distribution around 3.

```{r}
mu <- seq(-1, 5, length.out = 100)
prior <- rep(1/100, 100)
df <- tibble(mu, prior)
df
data <- rnorm(10, 3)
ll <- function(mu){
  return(prod(dnorm(data, mean = mu, sd = 1)))
}

df_results <- df %>% 
  mutate(l = as.numeric(map(mu, ll))) %>% 
  mutate(posterior = l*prior/sum(l*prior))

df_results %>% 
  ggplot(aes( x = mu)) +
  geom_line(aes(y = prior), color = 'red') +
  geom_line(aes(y = posterior), color = 'darkgreen')


df_results %>%   
  ggplot(aes(x = factor(mu))) +
  geom_point(aes(y = prior, size = 2), color='red') +
  geom_linerange(aes(ymin = 0, ymax = prior)) +
  geom_point(aes(y = posterior, size = 2), , color='darkgreen') +
  geom_linerange(aes(ymin = 0, ymax = posterior))

```

Lets assume we collect 100 data points instead of 10.

```{r}
data <- rnorm(100, 3)
ll <- function(mu){
  return(prod(dnorm(data, mean = mu, sd = 1)))
}

df_results <- df %>% 
  mutate(l = as.numeric(map(mu, ll))) %>% 
  mutate(posterior = l*prior/sum(l*prior))

df_results %>% 
  ggplot(aes( x = mu)) +
  geom_line(aes(y = prior), color = 'red') +
  geom_line(aes(y = posterior), color = 'darkgreen')


df_results %>%   
  ggplot(aes(x = factor(mu))) +
  geom_point(aes(y = prior), color='red') +
  geom_linerange(aes(ymin = 0, ymax = prior)) +
  geom_point(aes(y = posterior), , color='darkgreen') +
  geom_linerange(aes(ymin = 0, ymax = posterior)) +
  xlab('')

```

## STUBBURN prior 1

```{r}
mu <- c(-0.10, 0, 0.50)
prior <- c(0, 0, 1)
df <- tibble(mu, prior)
df

set.seed(2022)
data <- rnorm(1000)
ll <- function(mu){
  return(prod(dnorm(data, mean = mu, sd = 1)))
}

df %>% 
  mutate(l = as.numeric(map(mu, ll))) %>% 
  mutate(posterior = l*prior/sum(l*prior)) %>% 
  ggplot(aes(x = factor(mu))) +
  geom_point(aes(y = prior, size = 2), color='red') +
  geom_linerange(aes(ymin = 0, ymax = prior)) +
  geom_point(aes(y = posterior, size = 2), , color='darkgreen') +
  geom_linerange(aes(ymin = 0, ymax = posterior))

```

## STUBBURN prior 2

```{r}
mu <- c(-0.10, 0.50)
prior <- c(0.5, 0.5)
df <- tibble(mu, prior)
df

set.seed(2022)
data <- rnorm(1000)
ll <- function(mu){
  return(prod(dnorm(data, mean = mu, sd = 1)))
}

df %>% 
  mutate(l = as.numeric(map(mu, ll))) %>% 
  mutate(posterior = l*prior/sum(l*prior)) %>% 
  ggplot(aes(x = factor(mu))) +
  geom_point(aes(y = prior, size = 2), color='red') +
  geom_linerange(aes(ymin = 0, ymax = prior)) +
  geom_point(aes(y = posterior, size = 2), , color='darkgreen') +
  geom_linerange(aes(ymin = 0, ymax = posterior))

```
